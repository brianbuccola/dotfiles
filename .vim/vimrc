" vim:    set fenc=utf-8 nu et sts=4 sw=4 ft=vim fdm=marker fmr={{{,}}}:
" file:   ~/.vimrc
" author: Brian Buccola

" Plugins {{{
call plug#begin('~/.vim/plugged')
Plug 'SirVer/ultisnips'
Plug 'beloglazov/vim-online-thesaurus'
Plug 'coderifous/textobj-word-column.vim'
Plug 'honza/vim-snippets'
Plug 'lervag/vimtex'
Plug 'morhetz/gruvbox'
Plug 'nanotech/jellybeans.vim'
Plug 'timakro/vim-searchant'
Plug 'tmhedberg/matchit'
Plug 'tomasr/molokai'
Plug 'tommcdo/vim-exchange'
Plug 'tommcdo/vim-lion'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-characterize'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-liquid'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'vim-scripts/ReplaceWithRegister'
Plug 'vim-scripts/vim-auto-save'
Plug 'wellle/targets.vim'
call plug#end()
" }}}
" Basics {{{
filetype plugin indent on      " Load filetype plugin/indent files.
syntax on                      " Enable syntax highlighting.
set autochdir                  " Always switch to current file directory.
set backup                     " Make backup files.
set backupdir=~/.vim/backup    " Backup directory.
set complete+=kspell           " Use <C-n> and <C-p> to get suggested spelling completions.
set directory=~/.vim/tmp       " Directory for swap files.
set ignorecase                 " Ignore case, except... (see smartcase)
set incsearch                  " Highlight as you type search phrase.
set modeline                   " Use file-specific settings, if available.
set mouse=a                    " Mouse support everywhere.
set mousehide                  " Auto-hide cursor while typing.
set number                     " Show line numbers.
set report=0                   " Tell me when anything is changed via :...
set ruler                      " Show current positions along bottom.
set scrolloff=5                " Keep 5 lines (top/bottom) for scope.
set showcmd                    " Show command being typed.
set showmatch                  " Show matching brackets.
set smartcase                  " ...when search string contains uppercase.
set spell                      " Highlight misspelled words.
set spellcapcheck=             " Don't highlight uncapitalized first word.
set splitright                 " Split to the right when executing :vsplit.
set wildignore+=*.swp,*.bak,*.jpg,*.gif,*.pdf,*.png
set wildmenu                   " Turn on command-line completion wild style.
set wildmode=list:longest,full " Make completion more like zsh.
let mapleader=' '              " Set <leader> to space.
let maplocalleader=' '         " Set <localleader> to space.
let g:netrw_liststyle=3        " Use tree style directory listing.
" }}}
" Colorschemes {{{
if has("gui_running")
    let g:gruvbox_contrast_dark='hard'
    colorscheme gruvbox
else
    let g:gruvbox_contrast_dark='hard'
    colorscheme gruvbox
endif
set background=dark " Use dark bg color and light fg colors.
" }}}
" GUI Settings {{{
set guifont=Fira\ Mono\ 11 " Use Fira Mono, size 11 font.
set guioptions-=L          " Remove left-hand scroll bar even when there is a vertically split window.
set guioptions-=T          " Remove toolbar.
set guioptions-=m          " Remove menu bar.
set guioptions-=r          " Remove right-hand scroll bar.
" }}}
" Text Formatting {{{
set autoindent                " Use indentation level of previous line.
set expandtab                 " No real tabs (use spaces for tabs).
set formatoptions+=j          " Delete comment character when joining commented lines.
set linebreak                 " Don't soft-wrap in the middle of a word.
set list                      " Show real tabs when present.
set listchars=tab:»\ ,trail:- " Show tabs and trailing whitespace.
set nojoinspaces              " Don't add extra space after '.', '!', etc. when joining.
set shiftwidth=4              " Set # of softtabs when using cindent, '<<', '>>', etc.
set showbreak=…               " Show '…' at the beginning of a soft-broken line.
set softtabstop=4             " Set # of spaces when hitting tab/delete.
set tabstop=8                 " Real tabs are 8 columns long.
set textwidth=80              " Set max # of characters on each line.
" }}}
" Autocmd's, functions, etc. {{{
" Autoreload after modifying .vimrc.
augroup reload_vimrc " {
    autocmd!
    autocmd BufWritePost $MYVIMRC source $MYVIMRC
augroup END " }

" Don't save backups when editing passwords.
augroup pass_nobackup " {
    autocmd!
    autocmd BufRead /dev/shm/pass.* setlocal nobackup
augroup END " }
" }}}
" Mappings {{{
" Switch from insert to normal mode using jj.
inoremap jj <Esc>

" Prevent <C-u> and <C-w> from deleting stuff irrecoverably by first creating an
" undo break. This lets you press <C-u> to delete stuff, then <Esc>u to undo
" that deletion. See :h i_CTRL-G_u.
inoremap <C-u> <C-g>u<C-u>
inoremap <C-w> <C-g>u<C-w>

" Add an undo break after each carriage return. The effect is that, if you type
" several lines at once and then <Esc>, then pressing u will undo the added text
" line by line instead of all at once. See :h i_CTRL-G_u.
inoremap <CR> <C-g>u<CR>

" Use <C-h> to delete entire previous word (instead of just character) in insert
" and command modes. Since <C-BS> is the same as <C-h>, <C-BS> will also delete
" previous word.
map! <C-h> <C-w>

" Edit current command in command-line window.
cnoremap <C-e> <C-f>

" Move around soft-wrapped lines as if they were hard wrapped.
noremap j gj
noremap k gk
noremap 0 g0
noremap ^ g^
noremap $ g$

" Use K to join current line with line above, just like J does with line below.
nnoremap K kJ

" Map Q to gqap (reformat paragraph of text) instead of Ex mode.
nnoremap Q gqap

" Make `Y' work like `D', `C', etc.
nnoremap Y y$

" Visually select the text just pasted.
nnoremap gz `[v`]

" Add vim-unimpaired-like keybinding for AutoSaveToggle.
nnoremap coa :AutoSaveToggle<CR>

" Easy edit.
nnoremap <leader>e :e<Space>

" Easy buffer switch.
nnoremap <leader>b :b<Space>

" Easy buffer next.
nnoremap <leader>n :bnext<CR>

" Easy buffer prev.
nnoremap <leader>p :bprev<CR>

" Switch to alternate buffer.
nnoremap <BS> <C-^>

" Easy save.
nnoremap <leader>w :update<CR>

" Look up current word (under cursor) in online thesaurus.
nnoremap <Leader>t :OnlineThesaurusCurrentWord<CR>
" }}}
" Plugin Settings {{{
" vim-markdown
let g:markdown_fenced_languages=['bash=sh', 'css', 'haskell', 'html', 'latex=tex', 'python', 'ruby']

" vim-liquid
let g:liquid_highlight_types=g:markdown_fenced_languages

" UltiSnips
let g:UltiSnipsEditSplit='horizontal'
let g:UltiSnipsExpandTrigger='<Tab>'
let g:UltiSnipsJumpForwardTrigger='<Tab>'
let g:UltiSnipsJumpBackwardTrigger='<S-Tab>'
let g:UltiSnipsSnippetsDir='~/.vim/UltiSnips'

" vim-auto-save
let g:auto_save_no_updatetime=1

" vim-online-thesaurus
let g:online_thesaurus_map_keys=0

" vimtex
let g:vimtex_imaps_enabled=0
let g:vimtex_latexmk_continuous=0
let g:vimtex_view_method='mupdf'
" }}}
